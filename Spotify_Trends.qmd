---
title: "Spotify Trends"
author: "Markus Janke, Tim Beyer"
format: html
editor: visual
---

# Quellenangaben

hier Datensatzquell einfügen

# Pakete laden

```{r, message=FALSE}
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
library(explore)
library(ggplot2)
```

# Arbeitsumgebung
Arbeitsverzeichnis setzen
```{r}
setwd(".")  # Arbeitsverzeichnis setzen
getwd()     # Arbeitsverzeichnis ausgeben

```

# Daten einlesen
```{r}
dataset <- read_csv("spotify-2023.csv")
```

# Daten einsehen

Erste und letzte Zeilen anzeigen
```{r}
head(dataset, 953)
tail(dataset, 10)
```

Ersten Werte jeder Spalte einsehen
```{r}
glimpse(dataset)
```


Dimensionen anzeigen
```{r}
dim(dataset)
```

Struktur anzeigen
```{r}
describe_tbl(dataset)
```

```{r}
describe(dataset)
```


Spaltennamen anzeigen
```{r}
colnames(dataset)
```

Zusammenfassung für jede Spalte anzeigen
```{r}
summary(dataset)
```

# Bearbeiten der Spalte streams, sodass diese als numerischer Wert interpretiert wird
```{r}
dataset$streams <- as.numeric(dataset$streams)
```
# Ersetzen der NAs in in_shazam_charts mit 0
```{r}
dataset$in_shazam_charts[is.na(dataset$in_shazam_charts)] <- 0
```

# Löschen des Datensatzes ohne eintrag in streams
```{r}
dataset <- dataset[!is.na(dataset$streams), ]
```

# Beliebtheitsscore berechnen

```{r}
# Annahme: Gewichtungen für die verschiedenen Variablen
w_streams <- 1
w_spotify_charts <- -2  # Negativ, da geringe Werte in den Charts besser sind
w_deezer_charts <- -1.5
w_apple_charts <- -1.3
w_shazam_charts <- -1.1

# Berechnung des Beliebheitsscores
dataset$popularity_score <- (
  w_streams * dataset$streams +
  w_spotify_charts * dataset$in_spotify_charts +
  w_deezer_charts * dataset$in_deezer_charts +
  w_apple_charts * dataset$in_apple_charts +
  w_shazam_charts * dataset$in_shazam_charts
) / sum(!is.na(dataset[, c("streams", "in_spotify_charts", "in_deezer_charts", "in_apple_charts", "in_shazam_charts")]))

# Anzeigen des aktualisierten Datensatzes
head(dataset, 100)

```

# Bearbeite die Namen der Spalten, sodass diese keine % enthalten
```{r}
dataset <- dataset |> rename_with(~str_replace(., "%", "_"))
```


#These: Je beliebter ein Song ist, desto besser lässt sich zu ihm Tanzen
```{r}

# Korrelation berechnen
correlation_danceability <- cor(dataset$popularity_score, dataset$danceability__)

# Scatterplot erstellen
plot(dataset$danceability__, dataset$popularity_score, xlab = "Tanzbarkeit", ylab = "Beliebtheitsscore", main = "Korrelation zwischen Tanzbarkeit und Beliebtheit")

```

#These: Die Veröffentlichung im Sommer führt zu höheren Streamzahlen   

```{r}
# Durchschnittliche Streams im Sommer
mean_streams_summer <- mean(dataset$streams[dataset$released_month %in% c(6, 7, 8)])

# Durchschnittliche Streams in anderen Jahreszeiten
mean_streams_other_seasons <- mean(dataset$streams[dataset$released_month %in% c(1, 2, 3, 4, 5, 9, 10, 11, 12)])

# Vergleich der beiden Werte
mean_streams_summer / mean_streams_other_seasons
  
mean_streams_summer
mean_streams_other_seasons

# Daten für das Balkendiagramm vorbereiten
bar_data <- data.frame(
  Season = c("Summer", "Other Seasons"),
  Mean_Streams = c(mean_streams_summer, mean_streams_other_seasons)
)

#Durschschnittliche Streams über die verschiedenen Monate berechnen
mean_streams_january <- mean(dataset$streams[dataset$released_month %in% c(1)])
mean_streams_february <- mean(dataset$streams[dataset$released_month %in% c(2)])
mean_streams_march <- mean(dataset$streams[dataset$released_month %in% c(3)])
mean_streams_april <- mean(dataset$streams[dataset$released_month %in% c(4)])
mean_streams_may <- mean(dataset$streams[dataset$released_month %in% c(5)])
mean_streams_june <- mean(dataset$streams[dataset$released_month %in% c(6)])
mean_streams_july <- mean(dataset$streams[dataset$released_month %in% c(7)])
mean_streams_august <- mean(dataset$streams[dataset$released_month %in% c(8)])
mean_streams_september <- mean(dataset$streams[dataset$released_month %in% c(9)])
mean_streams_october <- mean(dataset$streams[dataset$released_month %in% c(10)])
mean_streams_november <- mean(dataset$streams[dataset$released_month %in% c(11)])
mean_streams_dezember <- mean(dataset$streams[dataset$released_month %in% c(12)])


# Balkendiagramm erstellen

ggplot(bar_data, aes(x = Season, y = Mean_Streams, fill = Season)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  labs(title = "Durchschnittliche Streamzahlen im Sommer vs. andere Jahreszeiten",
       x = "Jahreszeit",
       y = "Durchschnittliche Streams") +
  theme_minimal()

#Balkendiagramm für die Streamzahlen über die verschiedenen Monate

# Daten für das Balkendiagramm vorbereiten und chronologisch ordnen
bar_data_months <- data.frame(
  Month = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "Dezember"),
  Mean_Streams = c(mean_streams_january, mean_streams_february, mean_streams_march, mean_streams_april, mean_streams_may, mean_streams_june, mean_streams_july, mean_streams_august, mean_streams_september, mean_streams_october, mean_streams_november, mean_streams_dezember)
)

#chronologische Ordnung der Daten
bar_data_months$Month <- factor(bar_data_months$Month, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "Dezember"))

#Balkendiagramm erstellen die Monate, es ist genug Platz für die Monatsnamen vorhanden  und die Werte an der y achse sind ausgeschrieben
ggplot(bar_data_months, aes(x = Month, y = Mean_Streams, fill = Month)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  labs(title = "Durchschnittliche Streamzahlen über die verschiedenen Monate",
       x = "Monat",
       y = "Durchschnittliche Streams") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma)

```

